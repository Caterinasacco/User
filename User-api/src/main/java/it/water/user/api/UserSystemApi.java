package it.water.user.api;

import it.water.core.api.model.PaginableResult;
import it.water.core.api.repository.query.Query;
import it.water.core.api.repository.query.QueryOrder;
import it.water.core.api.service.BaseEntitySystemApi;
import it.water.user.model.WaterUser;

/**
 * @Generated by Water Generator
 * This interface defines the internally exposed methods for the entity and allows interaction with it bypassing permission system.
 * The main goals of UserSystemApi is to validate the entity and pass it to the persistence layer.
 */
public interface UserSystemApi extends BaseEntitySystemApi<WaterUser> {
    /**
     * @param user object representing the registration form
     * @return registration confirmation
     */
    WaterUser register(WaterUser user);

    /**
     * @param email          of the user that must be activated
     * @param activationCode associated to the user that must be activated
     * @return the user object
     */
    void activateUser(String email, String activationCode);

    /**
     * @param userId
     */
    void activateUser(long userId);

    /**
     * Admins can deactivate access to users
     *
     * @param userId
     */
    void deactivateUser(long userId);

    /**
     * @param email        of the user that must be deleted
     * @param deletionCode of the user that must be deleted
     */
    void unregister(String email, String deletionCode);

    /**
     * Finds all deleted user
     *
     * @param delta
     * @param page
     * @param filter
     * @param queryOrder
     * @return
     */
    PaginableResult<WaterUser> findAllDeleted(int delta, int page, Query filter, QueryOrder queryOrder);

    /**
     * Counts all deleted users
     *
     * @param filter
     * @return
     */
    long countAllDeleted(Query filter);

    /**
     * Find an existing user by username via query
     *
     * @param username parameter required to find an existing user
     * @return the user with username entered
     */
    WaterUser findByUsername(String username);

    /**
     * Find an existing user by username via query
     *
     * @param email parameter required to find an existing user
     * @return the user with username entered
     */
    WaterUser findByEmail(String email);

    /**
     * User can update deletion code, but only if he is logged in.
     *
     * @param deletionCode
     * @return
     */
    WaterUser changeDeletionCode(String deletionCode);

    /**
     * @param user            to update
     * @param password
     * @param passwordConfirm
     * @return
     */
    WaterUser changePassword(WaterUser user, String password, String passwordConfirm);
}