package it.water.user.api;

import it.water.core.api.model.PaginableResult;
import it.water.core.api.repository.query.Query;
import it.water.core.api.repository.query.QueryOrder;
import it.water.core.api.service.BaseEntityApi;
import it.water.user.model.WaterUser;

/**
 * @Generated by Water Generator
 * This interface defines the externally exposed methods for the entity and allows interaction with it through a permission system.
 */
public interface UserApi extends BaseEntityApi<WaterUser> {
    /**
     * @param username
     * @return
     */
    WaterUser findByUsername(String username);

    /**
     * @param user to be registered
     */
    void register(WaterUser user);

    /**
     * Starts delete account process
     */
    void unregisterAccountRequest();

    /**
     * Finalizes the delete account process
     *
     * @param email
     * @param deletionCode
     */
    void unregister(String email, String deletionCode);

    /**
     * Finds all deleted user
     *
     * @param delta
     * @param page
     * @param filter
     * @param queryOrder
     * @return
     */
    PaginableResult<WaterUser> findAllDeleted(int delta, int page, Query filter, QueryOrder queryOrder);

    /**
     * Counts all deleted users
     *
     * @param filter
     * @return
     */
    long countAllDeleted(Query filter);

    /**
     * Activating the registered user
     *
     * @param email
     * @param activationCode
     */
    void activate(String email, String activationCode);

    /**
     * @param userId
     */
    void activate(long userId);

    /**
     * Activating the registered user
     *
     * @param userId
     */
    void deactivate(long userId);

    /**
     * Starts the password reset process
     *
     * @param email
     */
    void passwordResetRequest(String email);

    /**
     * Finalize the password reset process.
     *
     * @param email
     * @param resetCode       received by email
     * @param password
     * @param passwordConfirm
     */
    void resetPassword(String email, String resetCode, String password,
                       String passwordConfirm);

    /**
     * Password change
     *
     * @param userId
     * @param oldPassword
     * @param newPassword
     * @param passwordConfirm
     * @return
     */
    WaterUser changePassword(long userId, String oldPassword,
                             String newPassword, String passwordConfirm);

    /**
     * Updates account info
     *
     * @param user
     * @return
     */
    WaterUser updateAccountInfo(WaterUser user);

}