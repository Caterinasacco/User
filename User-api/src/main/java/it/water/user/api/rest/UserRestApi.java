package it.water.user.api.rest;


import com.fasterxml.jackson.annotation.JsonView;
import io.swagger.annotations.*;
import it.water.core.api.model.PaginableResult;
import it.water.core.api.service.rest.FrameworkRestApi;
import it.water.core.api.service.rest.RestApi;
import it.water.core.api.service.rest.WaterJsonView;
import it.water.service.rest.api.security.LoggedIn;
import it.water.user.model.WaterUser;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;

/**
 * @Generated by Water Generator
 * Rest Api Interface for User entity.
 * This interfaces exposes all CRUD methods with default JAXRS annotations.
 */
@Path("/users")
@Api(produces = MediaType.APPLICATION_JSON, tags = "Water User API")
@FrameworkRestApi
public interface UserRestApi extends RestApi {

    @LoggedIn
    @POST
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "/users", notes = "Save User", httpMethod = "POST", produces = "application/json", consumes = "application/json")
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Successful operation"),
            @ApiResponse(code = 404, message = "Entity not found"), @ApiResponse(code = 422, message = "Not validated"),
            @ApiResponse(code = 500, message = "Internal error")})
    @JsonView(WaterJsonView.Public.class)
    WaterUser save(WaterUser user);

    @LoggedIn
    @PUT
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "/users", notes = "Update User", httpMethod = "PUT", produces = "application/json", consumes = "application/json")
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Successful operation"),
            @ApiResponse(code = 404, message = "Entity not found"), @ApiResponse(code = 422, message = "Not validated"),
            @ApiResponse(code = 500, message = "Internal error")})
    @JsonView(WaterJsonView.Public.class)
    WaterUser update(WaterUser user);

    @LoggedIn
    @Path("/{id}")
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "/users/{id}", notes = "Find a User", httpMethod = "GET", produces = "application/json", consumes = "application/json")
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Successful operation"),
            @ApiResponse(code = 404, message = "Entity not found"), @ApiResponse(code = 422, message = "Not validated"),
            @ApiResponse(code = 500, message = "Internal error")})
    @JsonView(WaterJsonView.Public.class)
    WaterUser find(@PathParam("id") long id);

    @LoggedIn
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "/users", notes = "Remove User", httpMethod = "GET", produces = "application/json", consumes = "application/json")
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Successful operation"),
            @ApiResponse(code = 404, message = "Entity not found"), @ApiResponse(code = 422, message = "Not validated"),
            @ApiResponse(code = 500, message = "Internal error")})
    @JsonView(WaterJsonView.Public.class)
    PaginableResult<WaterUser> findAll();

    @LoggedIn
    @Path("/{id}")
    @DELETE
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "/users/{id}", notes = "Remove User", httpMethod = "DELETE", produces = "application/json", consumes = "application/json")
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Successful operation"),
            @ApiResponse(code = 404, message = "Entity not found"), @ApiResponse(code = 422, message = "Not validated"),
            @ApiResponse(code = 500, message = "Internal error")})
    @JsonView(WaterJsonView.Public.class)
    void remove(@PathParam("id") long id);

    /**
     * @param user object representing the registration form
     * @return registered user
     */
    @Path("/register")
    @POST
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "/users/register", notes = "Register", httpMethod = "POST", produces = "application/json", consumes = "application/json")
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Successful operation"),
            @ApiResponse(code = 404, message = "Entity not found"), @ApiResponse(code = 422, message = "Not validated"),
            @ApiResponse(code = 500, message = "Internal error")})
    @JsonView(WaterJsonView.Public.class)
    WaterUser register(WaterUser user);

    /**
     * @param email          of the user must be activated
     * @param activationCode activation code for the requested user
     * @return registered user
     */
    @Path("/activate")
    @PUT
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "/users/activate", notes = "Activate user", httpMethod = "PUT", produces = "application/json", consumes = "application/json")
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Successful operation"),
            @ApiResponse(code = 404, message = "Entity not found"), @ApiResponse(code = 422, message = "Not validated"),
            @ApiResponse(code = 500, message = "Internal error")})
    @JsonView(WaterJsonView.Public.class)
    void activate(@QueryParam("email") String email, @QueryParam("activationCode") String activationCode);

    /**
     * @param userId
     * @return registered user
     */
    @LoggedIn
    @Path("/{id}/activate")
    @PUT
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "/users/activate", notes = "Activate user by id, used bu admin", httpMethod = "PUT", produces = "application/json", consumes = "application/json")
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Successful operation"),
            @ApiResponse(code = 404, message = "Entity not found"), @ApiResponse(code = 422, message = "Not validated"),
            @ApiResponse(code = 500, message = "Internal error")})
    @JsonView(WaterJsonView.Public.class)
    void activate(@PathParam("id") long userId);

    /**
     * @param userId of the user must be deactivated
     * @return registered user
     */
    @LoggedIn
    @Path("/{id}/deactivate")
    @PUT
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "/users/{id}/deactivate", notes = "Deactivate user by admin", httpMethod = "PUT", produces = "application/json", consumes = "application/json")
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Successful operation"),
            @ApiResponse(code = 404, message = "Entity not found"), @ApiResponse(code = 422, message = "Not validated"),
            @ApiResponse(code = 500, message = "Internal error")})
    @JsonView(WaterJsonView.Public.class)
    void deactivate(@PathParam("id") long userId);

    /**
     * Request from logged user to unregister himself
     */
    @LoggedIn
    @Path("/unregisterRequest")
    @POST
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "/users/unregisterRequest", notes = "Request for Unregister a user", httpMethod = "POST", produces = "application/json", consumes = "application/json")
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Successful operation"),
            @ApiResponse(code = 404, message = "Entity not found"), @ApiResponse(code = 422, message = "Not validated"),
            @ApiResponse(code = 500, message = "Internal error")})
    @JsonView(WaterJsonView.Public.class)
    void unregisterRequest();

    /**
     * @param email        of the user must be deleted
     * @param deletionCode associated to the user to delete
     */
    @LoggedIn
    @Path("/unregister")
    @DELETE
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "/users/unregister", notes = "Unregister user", httpMethod = "DELETE", produces = "application/json", consumes = "application/json")
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Successful operation"),
            @ApiResponse(code = 404, message = "Entity not found"), @ApiResponse(code = 422, message = "Not validated"),
            @ApiResponse(code = 500, message = "Internal error")})
    @JsonView(WaterJsonView.Public.class)
    void unregister(@QueryParam("email") String email, @QueryParam("deletionCode") String deletionCode);

    @Path("/resetPasswordRequest")
    @PUT
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "/users/resetPasswordRequest", notes = "Reset User Password", httpMethod = "PUT", produces = "application/json", consumes = "application/json")
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Successful operation"),
            @ApiResponse(code = 404, message = "Entity not found"), @ApiResponse(code = 422, message = "Not validated"),
            @ApiResponse(code = 500, message = "Internal error")})
    @JsonView(WaterJsonView.Public.class)
    void passwordResetRequest(@ApiParam(value = "User email", required = true) @QueryParam("email") String email);

}
