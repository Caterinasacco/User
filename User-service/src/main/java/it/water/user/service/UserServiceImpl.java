package it.water.user.service;

import it.water.core.api.bundle.Runtime;
import it.water.core.api.model.PaginableResult;
import it.water.core.api.notification.email.EmailContentBuilder;
import it.water.core.api.notification.email.EmailNotificationService;
import it.water.core.api.permission.SecurityContext;
import it.water.core.api.registry.ComponentRegistry;
import it.water.core.api.repository.query.Query;
import it.water.core.api.repository.query.QueryOrder;
import it.water.core.api.security.EncryptionUtil;
import it.water.core.interceptors.annotations.FrameworkComponent;
import it.water.core.interceptors.annotations.Inject;
import it.water.core.model.exceptions.WaterRuntimeException;
import it.water.core.permission.action.CrudActions;
import it.water.core.permission.action.UserActions;
import it.water.core.permission.annotations.AllowGenericPermissions;
import it.water.core.permission.annotations.AllowLoggedUser;
import it.water.core.permission.exceptions.UnauthorizedException;
import it.water.repository.entity.model.exceptions.EntityNotFound;
import it.water.repository.service.BaseEntityServiceImpl;
import it.water.user.api.UserApi;
import it.water.user.api.UserSystemApi;
import it.water.user.api.options.UserOptions;
import it.water.user.model.UserConstants;
import it.water.user.model.WaterUser;
import lombok.Getter;
import lombok.Setter;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.UUID;

/**
 * @Generated by Water Generator
 * Service Api Class for User entity.
 */
@FrameworkComponent
public class UserServiceImpl extends BaseEntityServiceImpl<WaterUser> implements UserApi {

    @Inject
    @Getter
    @Setter
    private UserSystemApi systemService;

    @Inject
    @Getter
    @Setter
    private ComponentRegistry componentRegistry;

    @Inject
    @Setter
    private UserOptions userOptions;

    @Inject
    @Setter
    private EmailNotificationService emailNotificationService;

    @Inject
    @Setter
    private EmailContentBuilder emailContentBuilder;

    @Inject
    @Setter
    private EncryptionUtil encryptionUtil;

    @Inject
    @Setter
    private Runtime waterRuntime;

    public UserServiceImpl() {
        super(WaterUser.class);
    }

    @Override
    @AllowGenericPermissions(actions = {CrudActions.FIND})
    public WaterUser findByUsername(String username) {
        return systemService.findByUsername(username);
    }

    @Override
    public void register(WaterUser user) {
        // forcing active false
        user.setActive(false);
        user.setActivateCode(UUID.randomUUID().toString());
        user = this.systemService.register(user);
        this.sendRegistrationEmailNotification(user);
    }

    @Override
    public void activate(String email, String activationCode) {
        this.systemService.activateUser(email, activationCode);
    }

    @Override
    @AllowGenericPermissions(actions = UserActions.ACTIVATE)
    public void activate(long userId) {
        this.systemService.activateUser(userId);
    }

    @Override
    @AllowGenericPermissions(actions = UserActions.DEACTIVATE)
    public void deactivate(long userId) {
        this.systemService.deactivateUser(userId);
    }

    @Override
    public void passwordResetRequest(String email) {
        WaterUser u = this.systemService.findByEmail(email);
        if (u != null) {
            u.setPasswordResetCode(UUID.randomUUID().toString());
            u = this.systemService.update(u);
            sendPasswordResetEmailNotification(u);
        } else {
            throw new EntityNotFound();
        }
    }

    @Override
    public void resetPassword(String email, String resetCode, String password, String passwordConfirm) {
        WaterUser u = this.systemService.findByEmail(email);
        if (u != null) {
            if (u.getPasswordResetCode() == null) {
                throw new UnauthorizedException("Wrong password reset code!");
            }
            if (u.getPasswordResetCode().equals(resetCode)) {
                if (passwordMatch(password, passwordConfirm)) {
                    this.systemService.changePassword(u, password, passwordConfirm);
                    return;
                } else {
                    throw new WaterRuntimeException(UserConstants.USER_MSG_PASSWORD_DO_NOT_MATCH);
                }
            }
            throw new WaterRuntimeException("Wrong password reset code!");
        } else {
            throw new EntityNotFound();
        }
    }

    @AllowLoggedUser
    @Override
    public WaterUser changePassword(long userId, String oldPassword, String newPassword, String passwordConfirm) {
        SecurityContext securityContext = waterRuntime.getSecurityContext();
        //user can change their password or admin can change users password
        if (waterRuntime.getSecurityContext() == null || (!securityContext.isAdmin() && userId != securityContext.getLoggedEntityId()))
            throw new UnauthorizedException();
        WaterUser loggedUser = this.systemService.find(securityContext.getLoggedEntityId());
        if (oldPassword != null && newPassword != null && passwordConfirm != null) {
            if (passwordMatch(oldPassword, loggedUser.getPassword())) {
                return this.systemService.changePassword(loggedUser, newPassword, passwordConfirm);
            } else {
                throw new WaterRuntimeException(UserConstants.USER_MSG_PASSWORD_DO_NOT_MATCH);
            }
        } else {
            throw new WaterRuntimeException(UserConstants.USER_MSG_PASSWORD_NOT_NULL);
        }
    }

    @AllowLoggedUser
    @Override
    public WaterUser updateAccountInfo(WaterUser user) {
        WaterUser loggedUser = this.systemService.findByUsername(waterRuntime.getSecurityContext().getLoggedUsername());
        if (loggedUser.getId() == user.getId()) {
            loggedUser.updateAccountInfo(user.getName(), user.getLastname(), user.getEmail(), user.getUsername());
            user = this.systemService.update(loggedUser);
            return user;
        }
        throw new UnauthorizedException();
    }

    @AllowLoggedUser
    @Override
    public void unregisterAccountRequest() {
        String deletionCode = UUID.randomUUID().toString();
        WaterUser loggedUser = this.systemService.changeDeletionCode(deletionCode);
        sendDeletionRequestEmailNotification(loggedUser);
    }

    @AllowLoggedUser
    @Override
    public void unregister(String email, String deletionCode) {
        SecurityContext securityContext = waterRuntime.getSecurityContext();
        WaterUser user = this.systemService.findByEmail(email);
        if (user != null) {
            if ((deletionCode == null || deletionCode.isEmpty()) && !securityContext.isAdmin()) {
                getLog().info("Delete account fail. User with id {}, perform deletion without specifying deletion code", securityContext.getLoggedEntityId());
                throw new UnauthorizedException();
            }
            if (securityContext.getLoggedEntityId() != user.getId() && !securityContext.isAdmin()) {
                getLog().info("Delete account fail. User with id {},  cannot delete user with id {}", securityContext.getLoggedEntityId(), user.getId());
                throw new UnauthorizedException();
            }

            if (user.getDeletionCode() == null || user.getDeletionCode().isEmpty()) {
                getLog().info("Delete account failed. User with id {}, perform deletion without requesting deletion code", securityContext.getLoggedEntityId());
                throw new UnauthorizedException();
            }
            //validates deletion code internally in the repository method
            this.systemService.unregister(user.getEmail(), user.getDeletionCode());
            getLog().info("User with id {} , delete himself from platform", user.getId());
            return;
        }
        throw new EntityNotFound();
    }

    @Override
    @AllowGenericPermissions(actions = CrudActions.FIND_ALL)
    public PaginableResult<WaterUser> findAllDeleted(int delta, int page, Query filter, QueryOrder queryOrder) {
        return systemService.findAllDeleted(delta, page, filter, queryOrder);
    }

    @Override
    @AllowGenericPermissions(actions = CrudActions.FIND_ALL)
    public long countAllDeleted(Query filter) {
        return systemService.countAllDeleted(filter);
    }

    private boolean passwordMatch(String password, String passwordConfirm) {
        try {
            return password.equals(passwordConfirm);
        } catch (Exception e) {
            getLog().error(e.getMessage(), e);
        }
        return false;
    }

    private void sendRegistrationEmailNotification(WaterUser user) {
        List<String> recipients = new ArrayList<>();
        recipients.add(user.getEmail());
        String accountAttivationDefaultTemplate = "";
        HashMap<String, Object> params = new HashMap<>();
        params.put("username", user.getUsername());
        params.put("activateAccountUrl", userOptions.getUserActivationUrl() + "/" + user.getEmail() + "/" + user.getActivateCode());
        params.put("activationCode", user.getActivateCode());
        sendEmailNotification("Account Activation!", recipients, userOptions.getUserRegistrationEmailTemplateName(), accountAttivationDefaultTemplate, params);
    }

    private void sendPasswordResetEmailNotification(WaterUser user) {
        List<String> recipients = new ArrayList<>();
        recipients.add(user.getEmail());
        String passwordResetDefaultTemplate = "";
        HashMap<String, Object> params = new HashMap<>();
        params.put("username", user.getUsername());
        params.put("changePwdUrl", userOptions.getPasswordResetUrl() + "/" + user.getEmail() + "/" + user.getPasswordResetCode());
        params.put("resetPwdCode", user.getPasswordResetCode());
        sendEmailNotification("Password Reset", recipients, userOptions.getUserRegistrationEmailTemplateName(), passwordResetDefaultTemplate, params);
    }

    private void sendDeletionRequestEmailNotification(WaterUser user) {
        List<String> recipients = new ArrayList<>();
        String accountDeletionRequestDefaultTemplate = "";
        recipients.add(user.getEmail());
        HashMap<String, Object> params = new HashMap<>();
        params.put("username", user.getUsername());
        params.put("accountDeletionCode", user.getDeletionCode());
        sendEmailNotification("Password Reset", recipients, userOptions.getUserRegistrationEmailTemplateName(), accountDeletionRequestDefaultTemplate, params);
    }

    private void sendEmailNotification(String subject, List<String> recipients, String templateName, String templateContent, HashMap<String, Object> params) {
        if (this.emailNotificationService == null) {
            getLog().warn("No EMAIL Notification service found, email won't be send");
            return;
        }
        try {
            if (templateName == null) {
                if (this.emailContentBuilder != null) {
                    String mailBody = emailContentBuilder.createBodyFromTemplate(templateContent, params);
                    this.emailNotificationService.sendMail(emailNotificationService.getSystemSenderName(), recipients, null, null, subject, mailBody, null);
                } else
                    getLog().warn("Impossibile to find an EMAIL CONTENT BUILDER, no mail will be sent, please install module which provide this capability such as: it.water.notificaion.mail");
            } else {
                this.emailNotificationService.sendMail(templateName, params, emailNotificationService.getSystemSenderName(), recipients, null, null, subject, null);
            }
        } catch (Exception e) {
            getLog().error(e.getMessage(), e);
        }
    }
}
