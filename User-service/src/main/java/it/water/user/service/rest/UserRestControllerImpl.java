
package it.water.user.service.rest;

import it.water.core.api.security.EncryptionUtil;
import it.water.core.api.service.BaseEntityApi;
import it.water.core.api.service.rest.FrameworkRestController;
import it.water.core.interceptors.annotations.Inject;
import it.water.service.rest.persistence.BaseEntityRestApi;
import it.water.user.api.UserApi;
import it.water.user.api.rest.UserRestApi;
import it.water.user.model.WaterUser;
import lombok.Setter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * @Generated by Water Generator
 * Rest Api Class for User entity.
 */
@FrameworkRestController(referredRestApi = UserRestApi.class)
public class UserRestControllerImpl extends BaseEntityRestApi<WaterUser> implements UserRestApi {
    private static Logger log = LoggerFactory.getLogger(UserRestControllerImpl.class);

    @Inject
    @Setter
    private UserApi userApi;

    @Inject
    @Setter
    private EncryptionUtil encryptionUtil;

    @Override
    protected BaseEntityApi<WaterUser> getEntityService() {
        return userApi;
    }

    @Override
    public WaterUser save(WaterUser entity) {
        generateSaltForNewUser(entity);
        return super.save(entity);
    }

    @Override
    public WaterUser register(WaterUser user) {
        log.debug("Invoking /users/register with : {}", user);
        generateSaltForNewUser(user);
        this.userApi.register(user);
        return user;
    }

    @Override
    public void activate(String email, String activationCode) {
        log.debug("Invoking /users/activate ");
        this.userApi.activate(email, activationCode);
    }

    @Override
    public void activate(long userId) {
        log.debug("Invokinh /users/{}/activate", userId);
        this.userApi.activate(userId);
    }

    @Override
    public void deactivate(long userId) {
        log.debug("Invoking /users/deactivate ");
        this.userApi.deactivate(userId);
    }

    @Override
    public void unregisterRequest() {
        log.debug("Invoking /users/unregisterRequest ");
        this.userApi.unregisterAccountRequest();
    }

    @Override
    public void unregister(String email, String deletionCode) {
        log.debug("Invoking /users/unregister ");
        this.userApi.unregister(email, deletionCode);
    }

    @Override
    public void passwordResetRequest(String email) {
        log.debug("Invoking /users/resetPasswordRequest ");
        this.userApi.passwordResetRequest(email);
    }

    /**
     * Generating password salt for new users. Not passed via JSON.
     *
     * @param newUser
     */
    private void generateSaltForNewUser(WaterUser newUser) {
        //salt is not passed by rest, so on new users
        if (newUser.getId() == 0) {
            newUser.setSalt(new String(encryptionUtil.generate16BytesSalt()));
        }
    }
}
